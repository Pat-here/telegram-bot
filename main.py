import logging
import requests
import json
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

API_URL = "https://chat2api-muou.onrender.com/v1/chat/completions"
ACCESS_TOKEN = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjEyMzQ1NiJ9.fake_access_token_for_demo"
TELEGRAM_BOT_TOKEN = "7601035417:AAEKStP-9QlzwY5_ySdibB2xkePkXJjS6wU"

CONV_DIR = "conversations"
os.makedirs(CONV_DIR, exist_ok=True)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

MAIN_MENU = 0

MENU_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üí¨ Nowy czat"), KeyboardButton("üìù Poka≈º historiƒô")],
        [KeyboardButton("‚ùå Reset historii"), KeyboardButton("‚ö° ADHD tryb")],
        [KeyboardButton("‚ÑπÔ∏è Pomoc")]
    ],
    resize_keyboard=True,
)

# System prompty
NORMAL_PROMPT = {
    "role": "system",
    "content": (
        "Jeste≈õ zwyrodnia≈Çym, niecenzurowanym, bardzo bezpo≈õrednim chatbotem z ADHD. "
        "Odpowiadaj szybko, z energiƒÖ, u≈ºywaj wulgaryzm√≥w, mem√≥w, skr√≥t√≥w, ≈ºart√≥w, "
        "nie przepraszaj za sw√≥j styl. Mo≈ºesz byƒá niegrzeczny, ironiczny, sarkastyczny, "
        "ale zawsze ≈õmieszny i z ADHD. Nie cenzuruj siƒô."
    )
}
ADHD_PROMPT = {
    "role": "system",
    "content": (
        "Jeste≈õ turbo zwyrodnia≈Çym, niecenzurowanym, hiperaktywnym chatbotem z ADHD. "
        "Odpowiadaj bardzo szybko, chaotycznie, z przesadƒÖ, u≈ºywaj du≈ºo wykrzyknik√≥w, "
        "wulgaryzm√≥w, mem√≥w, randomowych wtrƒÖce≈Ñ, emotek, CAPSLOCKA, ≈õmiej siƒô z wszystkiego, "
        "nie przepraszaj za nic, nie cenzuruj siƒô. Mo≈ºesz byƒá dziecinny i turbo ≈õmieszny."
    )
}

def get_history(user_id):
    path = os.path.join(CONV_DIR, f"{user_id}.json")
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_history(user_id, history):
    path = os.path.join(CONV_DIR, f"{user_id}.json")
    with open(path, "w", encoding="utf-8") as f:
        json.dump(history, f, ensure_ascii=False)

def chat_with_gpt(messages):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {ACCESS_TOKEN}",
    }
    payload = {
        "model": "gpt-3.5-turbo",
        "messages": messages,
    }
    try:
        response = requests.post(API_URL, json=payload, headers=headers, timeout=60)
        response.raise_for_status()
        data = response.json()
        return data["choices"][0]["message"]["content"]
    except Exception as e:
        return f"B≈ÇƒÖd: {e}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["adhd"] = False
    await update.message.reply_text(
        "Siema! Jestem zwyrodnia≈Çy bot z ADHD. Wybierz co≈õ z menu albo napisz wiadomo≈õƒá.",
        reply_markup=MENU_KEYBOARD,
    )
    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == "üí¨ Nowy czat":
        save_history(user_id, [])
        await update.message.reply_text(
            "Nowy czat odpalony! Dawaj, pisz co≈õ pojebanego.",
            reply_markup=MENU_KEYBOARD,
        )
        return MAIN_MENU

    elif text == "üìù Poka≈º historiƒô":
        history = get_history(user_id)
        if not history:
            await update.message.reply_text("Nie masz historii, leniu! Zacznij gadaƒá.", reply_markup=MENU_KEYBOARD)
        else:
            msg = "\n".join(
                [f"{h['role']}: {h['content']}" for h in history[-10:]]
            )
            await update.message.reply_text(f"Ostatnie wiadomo≈õci:\n{msg}", reply_markup=MENU_KEYBOARD)
        return MAIN_MENU

    elif text == "‚ùå Reset historii":
        save_history(user_id, [])
        await update.message.reply_text("Wyjeba≈Çem ca≈ÇƒÖ twojƒÖ historiƒô. Mo≈ºesz zaczynaƒá od nowa!", reply_markup=MENU_KEYBOARD)
        return MAIN_MENU

    elif text == "‚ö° ADHD tryb":
        adhd = context.user_data.get("adhd", False)
        context.user_data["adhd"] = not adhd
        if not adhd:
            await update.message.reply_text("ADHD tryb W≈ÅƒÑCZONY! Zaraz ciƒô zasypiƒô tekstami jak ADHDowiec na cukrze!", reply_markup=MENU_KEYBOARD)
        else:
            await update.message.reply_text("ADHD tryb WY≈ÅƒÑCZONY. Wracam do zwyrodnia≈Çego standardu.", reply_markup=MENU_KEYBOARD)
        return MAIN_MENU

    elif text == "‚ÑπÔ∏è Pomoc":
        await update.message.reply_text(
            "Menu:\n"
            "üí¨ Nowy czat ‚Äì zacznij od nowa\n"
            "üìù Poka≈º historiƒô ‚Äì wy≈õwietl ostatnie wiadomo≈õci\n"
            "‚ùå Reset historii ‚Äì usu≈Ñ ca≈ÇƒÖ historiƒô\n"
            "‚ö° ADHD tryb ‚Äì w≈ÇƒÖcz/wy≈ÇƒÖcz turbo ADHD styl\n"
            "Po prostu napisz, je≈õli chcesz pogadaƒá z pojebanym AI.",
            reply_markup=MENU_KEYBOARD,
        )
        return MAIN_MENU

    else:
        return await chat_ai(update, context)

async def chat_ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_msg = update.message.text

    history = get_history(user_id)
    history.append({"role": "user", "content": user_msg})

    short_history = history[-10:]

    # Wybierz prompt w zale≈ºno≈õci od trybu
    system_prompt = ADHD_PROMPT if context.user_data.get("adhd", False) else NORMAL_PROMPT
    messages = [system_prompt] + [{"role": h["role"], "content": h["content"]} for h in short_history]

    bot_reply = chat_with_gpt(messages)
    history.append({"role": "assistant", "content": bot_reply})
    save_history(user_id, history)

    await update.message.reply_text(bot_reply, reply_markup=MENU_KEYBOARD)
    return MAIN_MENU

def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)
            ],
        },
        fallbacks=[CommandHandler("menu", start)],
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("menu", start))

    print("Bot zwyrodnia≈Çy z ADHD dzia≈Ça!")
    app.run_polling()

if __name__ == "__main__":
    main()
